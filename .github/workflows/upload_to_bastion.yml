name: Upload Ansible to Bastion

on:
  workflow_dispatch:
    inputs:
      env:
        description: "Target environment (e.g., dev)"
        required: true
        default: "dev"
      ssh_user:
        description: "SSH user for Bastion"
        required: true
        default: "ec2-user"

permissions:
  id-token: write
  contents: read

jobs:
  upload:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.env }}

    env:
      ENV: ${{ github.event.inputs.env }}
      BASTION_HOST: ${{ secrets.BASTION_HOST }}
      BASTION_SSH_KEY: ${{ secrets.BASTION_SSH_KEY }}
      OIDC_ROLE_ARN_GITHUB: ${{ secrets.OIDC_ROLE_ARN_GITHUB }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      S3_BUCKET: ${{ vars.S3_BUCKET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: check
        run: |
          echo "ENV: $ENV"
          echo "BASTION_SSH_KEY: $BASTION_SSH_KEY"
          echo "OIDC_ROLE_ARN_GITHUB: $OIDC_ROLE_ARN_GITHUB"
      
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN_GITHUB }}
          aws-region: ap-northeast-1
          audience: sts.amazonaws.com

      - name: Get Bastion Security Group ID
        id: get_sg
        run: |
          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=$ENV-bastion-sg" \
            --query "SecurityGroups[0].GroupId" \
            --output text)
          echo "bastion_sg_id=$SG_ID" >> $GITHUB_OUTPUT

      - name: Open SSH to 0.0.0.0/0
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ steps.get_sg.outputs.bastion_sg_id }} \
            --protocol tcp --port 22 --cidr 0.0.0.0/0

      - name: Get Bastion Public IP
        id: get_ip
        run: |
          BASTION_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$ENV-bastion-ansible" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "bastion_ip=$BASTION_IP" >> $GITHUB_OUTPUT

      - name: Fail if Bastion IP not found
        if: steps.get_ip.outputs.bastion_ip == ''
        run: |
          echo "Bastion IP not found"
          exit 1

      - name: check2
        run: |
          echo "BASTION_IP: ${{ steps.get_ip.outputs.bastion_ip }}"

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BASTION_SSH_KEY}}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Set up known_hosts
        run: |
          ssh-keyscan ${{ steps.get_ip.outputs.bastion_ip}} >> ~/.ssh/known_hosts

      - name: Upload Ansible directory
        run: |
          rsync -avz ansible/ ${{ github.event.inputs.ssh_user }}@${{ steps.get_ip.outputs.bastion_ip }}:~/ansible/

      # RTSP EC2のプライベートIPアドレス一覧を取得
      - name: Get RTSP EC2 Private IPs
        id: get_rtsp_ips
        run: |
          RTSP_IPS=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=$ENV-rtsp" "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].PrivateIpAddress" \
            --output text)
          echo "rtsp_ips=$RTSP_IPS" >> $GITHUB_OUTPUT

      - name: check3
        run: |
          echo "RTSP_IP: ${{ steps.get_rtsp_ips.outputs.rtsp_ips }}"

      - name: Set up EC2 SSH key for RTSP
        run: |
          echo "${{ secrets.RTSP_EC2_SSH_KEY }}" > ec2_id_rsa
          chmod 600 ec2_id_rsa
          rsync -avz ec2_id_rsa ${{ github.event.inputs.ssh_user }}@${{ steps.get_ip.outputs.bastion_ip }}:~/.ssh/id_rsa

      # Bastionにinventoryファイルを作成して転送
      - name: Create and upload inventory
        run: |
          echo "[rtsp]" > inventory
          for ip in ${{ steps.get_rtsp_ips.outputs.rtsp_ips }}; do
            echo "$ip" >> inventory
          done
          rsync -avz inventory ${{ github.event.inputs.ssh_user }}@${{ steps.get_ip.outputs.bastion_ip }}:~/ansible/inventory

      # Bastionに環境変数を転送
      - name: Export workflow env as ENV on Bastion
        run: |
          echo "export ENV=${ENV}" > env.sh
          echo "export AWS_REGION=${AWS_REGION}" >> env.sh
          echo "export S3_BUCKET=${S3_BUCKET}" >> env.sh
          # 必要なら他の変数も追加
          rsync -avz env.sh ${{ github.event.inputs.ssh_user }}@${{ steps.get_ip.outputs.bastion_ip }}:~/ansible/env.sh

      # Bastion経由でrun_with_reload_hosts.shを実行
      - name: Run run_with_reload_hosts.sh on bastion
        run: |
          ssh ${{ github.event.inputs.ssh_user }}@${{ steps.get_ip.outputs.bastion_ip }} \
            "cd ~/ansible && source env.sh && chmod +x run_with_reload_hosts.sh && ./run_with_reload_hosts.sh"

      - name: Close SSH from 0.0.0.0/0
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ steps.get_sg.outputs.bastion_sg_id }} \
            --protocol tcp --port 22 --cidr 0.0.0.0/0
